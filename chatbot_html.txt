<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chatbot de Emergência - Protótipo</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        /* Using system fonts that approximate San Francisco (iOS font) */
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
            background-color: #f2f2f7; /* iOS background color */
        }

        .chat-container {
            max-width: 500px;
            margin: 20px auto;
            border: 1px solid #d1d1d6; /* iOS-like border color */
            border-radius: 10px; /* More rounded corners */
            overflow: hidden;
            display: flex;
            flex-direction: column;
            height: 600px; /* Fixed height for the chat window */
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1); /* Subtle shadow */
        }

         /* Header bar for iOS feel */
        .chat-header {
            background-color: #f9f9f9; /* Light header background */
            padding: 12px 1rem;
            text-align: center;
            font-weight: 600; /* Semi-bold */
            border-bottom: 1px solid #d1d1d6;
            color: #333;
        }


        .chat-box {
            flex-grow: 1;
            padding: 1rem;
            overflow-y: auto; /* Enable scrolling */
            background-color: #ffffff; /* White chat background */
        }

        .message {
            margin-bottom: 0.75rem; /* Tailwind mb-3 */
            padding: 0.6rem 0.9rem; /* Slightly more padding */
            border-radius: 18px; /* Very rounded corners for bubbles */
            max-width: 85%; /* Slightly wider bubbles */
            word-wrap: break-word; /* Ensure long words break */
        }

        .message.user {
            background-color: #0b7aff; /* iOS blue */
            color: white;
            align-self: flex-end;
            margin-left: auto; /* Align to the right */
            /* Optional: Add a small tail */
            position: relative;
        }
         /* Optional tail for user message */
        .message.user::before {
            content: '';
            position: absolute;
            bottom: 0;
            right: -7px; /* Position the tail */
            width: 15px;
            height: 15px;
            background-color: #0b7aff;
            clip-path: polygon(100% 0, 0% 100%, 100% 100%); /* Triangle shape */
            transform: rotate(90deg); /* Rotate to point correctly */
        }


        .message.bot {
            background-color: #e5e5ea; /* iOS light gray */
            color: #1f2937; /* Tailwind gray-800 */
            align-self: flex-start;
            margin-right: auto; /* Align to the left */
             /* Optional: Add a small tail */
            position: relative;
        }

         /* Optional tail for bot message */
         .message.bot::before {
            content: '';
            position: absolute;
            bottom: 0;
            left: -7px; /* Position the tail */
            width: 15px;
            height: 15px;
            background-color: #e5e5ea;
            clip-path: polygon(0% 0, 100% 100%, 0% 100%); /* Triangle shape */
            transform: rotate(-90deg); /* Rotate to point correctly */
        }


         /* Style for the SAMU button */
        .samu-button {
            display: inline-block;
            padding: 15px 25px;
            font-size: 1.125rem; /* Tailwind text-lg */
            font-weight: 700; /* Tailwind font-bold */
            color: white;
            background-color: #ff3b30; /* iOS red */
            border: none;
            border-radius: 8px; /* Slightly less rounded than bubbles */
            text-align: center;
            text-decoration: none;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1); /* Softer shadow */
            margin-top: 1rem; /* Tailwind mt-4 */
            margin-bottom: 1rem; /* Tailwind mb-4 */
            transition: background-color 0.2s ease-in-out;
        }

        .samu-button:hover {
             background-color: #ff453a; /* Slightly lighter red on hover */
        }

         /* Style for the info link */
        .info-link {
             display: inline-block;
             margin-top: 1rem;
             color: #0b7aff; /* iOS blue */
             text-decoration: none;
             font-weight: 500;
        }

        .info-link:hover {
            text-decoration: underline;
        }

         /* Style for links within messages */
        .message a {
            color: #0b7aff; /* iOS blue */
            text-decoration: underline;
        }

        .message a:hover {
            text-decoration: none;
        }


        .input-area {
            display: flex;
            padding: 0.75rem 1rem; /* Adjusted padding */
            border-top: 1px solid #d1d1d6; /* iOS-like border */
            background-color: #f9f9f9; /* Light input area background */
             align-items: center; /* Vertically align items */
        }

        .input-area input[type="text"] {
            flex-grow: 1;
            padding: 0.5rem 0.75rem; /* Tailwind py-2 px-3 */
            border: 1px solid #d1d1d6; /* iOS-like border */
            border-radius: 20px; /* Pill shape */
            margin-right: 0.5rem; /* Tailwind mr-2 */
            outline: none;
             background-color: #ffffff; /* White input field background */
             font-size: 1rem;
        }

        .input-area button {
            padding: 0.5rem 1rem; /* Tailwind py-2 px-4 */
            background-color: #0b7aff; /* iOS blue */
            color: white;
            border: none;
            border-radius: 20px; /* Pill shape */
            cursor: pointer;
            transition: background-color 0.2s ease-in-out;
             font-weight: 500; /* Medium font weight */
        }

        .input-area button:hover {
            background-color: #007aff; /* Slightly darker blue on hover */
        }

         /* Responsive adjustments */
        @media (max-width: 600px) {
            .chat-container {
                margin: 0;
                height: 100vh; /* Full height on small screens */
                border-radius: 0; /* No border radius on full screen */
                box-shadow: none;
            }
             .message {
                max-width: 90%; /* Allow messages to be wider on small screens */
            }
        }

    </style>
     <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>

    <div class="chat-container">
        <div class="chat-header">Chat de Emergência</div>
        <div class="chat-box" id="chat-box">
            </div>
        <div class="input-area">
            <input type="text" id="user-input" placeholder="Digite sua mensagem...">
            <button id="send-button">Enviar</button>
        </div>
    </div>

    <script>
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        const chatBox = document.getElementById('chat-box');

        // State variables to control the conversation flow
        let conversationStep = 0; // 0: Ask name, 1-3: Triaging questions, 4: SAMU decision, 5: Ask contact, 6: Ask address, 7: Simulate message, 8: Show info link
        let userName = "";
        const triagingQuestions = [
            { text: "A pessoa está inconsciente (não responde a chamados) OU não está respirando normalmente (ex: respiração muito rápida, muito lenta, ruidosa, ou ausente)? (sim/nao)", key: "inconsciente_ou_sem_respiracao_normal" },
            { text: "Houve algum acidente grave (ex: caída de altura, batida de carro, atropelamento, ferimento profundo por arma) OU a pessoa está com uma dor súbita e muito forte no peito, que pode irradiar para o braço ou pescoço? (sim/nao)", key: "acidente_grave_ou_dor_forte_peito" },
            { text: "A pessoa está tendo uma convulsão (ataque com tremores e perda de consciência) NESTE MOMENTO, ou apresentou subitamente dificuldade para falar, perda de força de um lado do corpo, ou desvio da boca (sugestivo de AVC)? (sim/nao)", key: "convulsao_ou_sinais_avc" }
        ];
        const triagingAnswers = {}; // Store answers as key-value pairs (key: boolean)
        const alertTexts = {
            "inconsciente_ou_sem_respiracao_normal": "Pessoa inconsciente ou com respiração anormal.",
            "acidente_grave_ou_dor_forte_peito": "Acidente grave ou dor forte no peito.",
            "convulsao_ou_sinais_avc": "Convulsão ou sinais de AVC."
        };
        let needsSamu = false;
        let emergencyContact = "";
        let emergencyAddress = "";

        // URL for additional information (replace with your actual link)
        const INFO_LINK = "https://docs.google.com/document/d/1o1Y6BgeNz1McApWFy4qkZRZA3TRCs-a-Izy5lEAwZZw/edit?usp=sharing"; // Example link

        // Function to add a message to the chat box
        function addMessage(text, sender, isHTML = false) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message', sender);
            if (isHTML) {
                messageElement.innerHTML = text; // Use innerHTML for HTML content
            } else {
                messageElement.textContent = text; // Use textContent for plain text
            }
            chatBox.appendChild(messageElement);
            // Scroll to the bottom of the chat box
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        // Function to handle the next step in the conversation
        function nextStep() {
            conversationStep++;
            setTimeout(() => { // Simulate time.sleep
                if (conversationStep >= 1 && conversationStep <= 3) {
                    // Ask the next triaging question
                     addMessage(triagingQuestions[conversationStep - 1].text, 'bot');
                } else if (conversationStep === 4) {
                    // SAMU decision step
                    needsSamu = Object.values(triagingAnswers).some(answer => answer === true); // Check if ANY answer is true

                    if (needsSamu) {
                        addMessage("AVISO: Pelo menos uma das suas respostas indica uma situação de emergência potencial!", 'bot');
                        const answeredSimKeys = Object.keys(triagingAnswers).filter(key => triagingAnswers[key]);
                        if (answeredSimKeys.length > 0) {
                            const alertDescriptions = answeredSimKeys.map(key => alertTexts[key] || key.replace(/_/g, " ").replace(/\b\w/g, l => l.toUpperCase()));
                             addMessage(`Condições de alerta identificadas (respondidas com 'sim'): ${alertDescriptions.join(', ')}`, 'bot');
                        }

                        setTimeout(() => {
                            addMessage("Acionar o SAMU (192) é fortemente recomendado.", 'bot');
                            // Simulate SAMU button using HTML
                             const samuButtonHTML = `
                                <a href="tel:192" target="_blank" class="samu-button">
                                    LIGAR PARA SAMU (192)
                                </a>
                            `;
                            addMessage(samuButtonHTML, 'bot', true); // Add as HTML

                            setTimeout(() => {
                                addMessage("AVISO: Como uma emergência foi identificada, também vamos preparar uma notificação para seu contato de emergência.", 'bot');
                                addMessage("--- CONFIGURAR CONTATO DE EMERGÊNCIA ---", 'bot');
                                addMessage("Digite o número de telefone do seu contato de emergência (ex: 11987654321):", 'bot');
                            }, 3000); // Simulate time.sleep(3)

                        }, 1000); // Simulate time.sleep(1)

                    } else {
                        addMessage("Com base nas suas respostas ('não' para todas as perguntas), a situação pode não exigir o SAMU imediatamente.", 'bot');
                        setTimeout(() => {
                            addMessage("No entanto, se você estiver em dúvida, a situação piorar, ou se houver outros sintomas preocupantes não perguntados, não hesite em ligar para o SAMU (192) ou procurar um serviço de saúde.", 'bot');
                             setTimeout(() => {
                                addMessage("--- Fim da Simulação do Chatbot de Emergência ---", 'bot');
                                nextStep(); // Move to show info link (step 8)
                             }, 1000); // Simulate time.sleep(1)
                        }, 1000); // Simulate time.sleep(1)
                    }
                } else if (conversationStep === 5 && needsSamu) {
                     // Ask for address if SAMU is needed
                     setTimeout(() => {
                         addMessage("--- INFORMANDO LOCALIZAÇÃO (POR ENDEREÇO) ---", 'bot');
                         setTimeout(() => {
                             addMessage("Por favor, digite a sua RUA, NÚMERO, BAIRRO ou um PONTO DE REFERÊNCIA claro:", 'bot');
                         }, 1000); // Simulate time.sleep(1)
                     }, 1000); // Simulate time.sleep(1)
                } else if (conversationStep === 6 && needsSamu) {
                    // Simulate sending message if SAMU is needed and address is provided
                    setTimeout(() => { // Simulate time.sleep(2)
                        const enderecoCodificado = encodeURIComponent(emergencyAddress);
                        // Simulating a link structure for the map
                        const linkMaps = `https://www.google.com/maps/search/?api=1&query=$${enderecoCodificado}`;

                         const answeredSimKeys = Object.keys(triagingAnswers).filter(key => triagingAnswers[key]);
                         const alertDescriptions = answeredSimKeys.map(key => alertTexts[key] || key.replace(/_/g, " ").replace(/\b\w/g, l => l.toUpperCase()));
                         let alertsText = "";
                         if(alertDescriptions.length > 0) {
                             alertsText = "\nSintomas/Condições reportadas:\n- " + alertDescriptions.join('\n- ');
                         }

                        // Modified simulatedMessage to include a clickable link for the map
                        const simulatedMessage = `
ALERTA DE EMERGÊNCIA!
${userName || "Alguém"} pode estar precisando de ajuda urgente!
Localização informada:
${emergencyAddress}
(Tentar ver no mapa: <a href="${linkMaps}" target="_blank">${linkMaps}</a>)${alertsText}

Por favor, tente contato ou procure ajuda.
                        `;

                        addMessage("--- ENVIANDO MENSAGEM DE EMERGÊNCIA (SIMULAÇÃO) ---", 'bot');
                        setTimeout(() => { // Simulate time.sleep(2)
                            addMessage(`A seguinte mensagem SERIA ENVIADA para o número: ${emergencyContact}`, 'bot');
                            addMessage("----------------------------------------------------", 'bot');
                            addMessage(simulatedMessage, 'bot', true); // Set isHTML to true to render the link
                            addMessage("----------------------------------------------------", 'bot');
                             setTimeout(() => { // Simulate time.sleep(1)
                                addMessage("Em um sistema real, esta mensagem seria enviada via SMS ou WhatsApp (usando APIs como Twilio).", 'bot');
                                setTimeout(() => { // Simulate time.sleep(1)
                                    addMessage("O link do mapa tentará localizar o endereço fornecido.", 'bot');
                                    addMessage("----------------------------------------------------\n", 'bot');
                                    setTimeout(() => { // Simulate time.sleep(3)
                                         addMessage("--- Fim da Simulação do Chatbot de Emergência ---", 'bot');
                                         nextStep(); // Move to show info link (step 8)
                                    }, 3000);
                                }, 1000);
                             }, 1000);
                        }, 2000);
                    }, 2000);

                } else if (conversationStep === 7 && needsSamu) {
                    // This step is now handled within step 6's timeouts
                    // We move directly to step 8 after message simulation
                } else if (conversationStep === 8) {
                    // Show additional information link
                    setTimeout(() => { // Simulate time.sleep(1)
                         addMessage("--- INFORMAÇÕES ADICIONAIS / INSTRUÇÕES ---", 'bot');
                         setTimeout(() => { // Simulate time.sleep(1)
                            // Added the mobile interface link as requested in the Python script
                            const mobileLinkHTML = `<p>Visualize a interface versão Mobile pelo link: <a href="https://g.co/gemini/share/feb6f9952d93" target="_blank" class="info-link">https://g.co/gemini/share/feb6f9952d93</a></p>`;
                            addMessage(mobileLinkHTML, 'bot', true);

                             setTimeout(() => { // Simulate time.sleep(1)
                                addMessage("Para mais detalhes sobre este projeto, incluindo como configurá-lo para envio real de mensagens com Twilio (SMS/WhatsApp), ou para acessar o código-fonte e documentação completa,", 'bot');
                                 setTimeout(() => { // Simulate time.sleep(1)
                                    const infoLinkHTML = `<a href="${INFO_LINK}" target="_blank" class="info-link">Clique aqui para visitar o link de informações adicionais.</a>`;
                                    addMessage(infoLinkHTML, 'bot', true);
                                    setTimeout(() => { // Simulate time.sleep(1)
                                        addMessage("\nObrigado por usar o assistente de emergência simulado!", 'bot');
                                         // End of conversation
                                        userInput.disabled = true;
                                        sendButton.disabled = true;
                                    }, 1000);
                                 }, 1000);
                             }, 1000);
                         }, 1000);
                    }, 1000);
                }

            }, conversationStep === 0 ? 0 : 500); // Add a small delay between bot messages, no delay for the very first message
        }

        // Event listener for the send button
        sendButton.addEventListener('click', () => {
            const messageText = userInput.value.trim();
            if (messageText !== '') {
                addMessage(messageText, 'user');
                userInput.value = ''; // Clear the input field

                if (conversationStep === 0) {
                    // Asking for name
                    userName = messageText || "Alguém"; // Use input or default
                    addMessage(`Olá, ${userName}! Sou seu assistente de emergência. Vou fazer algumas perguntas para entender a situação.`, 'bot');
                    addMessage("Por favor, responda com 'sim' ou 'nao'.", 'bot');
                    nextStep(); // Move to the first triaging question (step 1)
                } else if (conversationStep >= 1 && conversationStep <= 3) {
                    // Answering triaging questions
                    const answer = messageText.toLowerCase();
                    if (answer === 'sim' || answer === 'nao') {
                        // Store answer using the key from the questions array
                        triagingAnswers[triagingQuestions[conversationStep - 1].key] = (answer === 'sim');
                        if (conversationStep < 3) {
                            nextStep(); // Move to the next question
                        } else {
                            nextStep(); // Move to the SAMU decision step (step 4)
                        }
                    } else {
                        addMessage("Resposta inválida. Por favor, digite 'sim' ou 'nao'.", 'bot');
                        // Stay on the same step to repeat the question implicitly
                    }
                } else if (conversationStep === 4 && needsSamu) {
                    // Providing emergency contact
                    // Basic validation (digits only, min 9 length, allowing '+')
                    const cleanedContact = messageText.replace(/[^\d+]/g, ''); // Remove non-digit except '+'
                    if (cleanedContact.match(/^\+?\d{9,}$/)) {
                         emergencyContact = cleanedContact;
                         nextStep(); // Move to ask for address (step 5)
                    } else {
                         addMessage("Número inválido. Por favor, insira um número de telefone válido (pelo menos 9 dígitos, incluindo DDD se aplicável, pode usar '+').", 'bot');
                         // Stay on step 4 to re-ask for contact
                    }
                } else if (conversationStep === 5 && needsSamu) {
                    // Providing address
                     if (messageText.length > 0) {
                        emergencyAddress = messageText;
                        nextStep(); // Move to simulate message sending (step 6)
                     } else {
                         addMessage("O endereço não pode ficar em branco. Por favor, tente novamente.", 'bot');
                         // Stay on step 5 to re-ask for address
                     }
                }
                 // Steps 6 and 7 are handled by nextStep() after input.
                 // Step 8 is the end of the conversation.
            }
        });

        // Event listener for 'Enter' key in the input field
        userInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                event.preventDefault(); // Prevent default form submission behavior
                sendButton.click(); // Trigger the send button click
            }
        });

        // Initial bot message to start the conversation flow
        window.onload = function() {
             addMessage("Olá! Sou o Chatbot de Emergência. Qual é o seu nome (ou o nome da pessoa que precisa de ajuda)?", 'bot');
             // conversationStep remains 0, waiting for the name input
        };

    </script>

</body>
</html>
