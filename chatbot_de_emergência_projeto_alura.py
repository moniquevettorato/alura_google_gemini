"""Chatbot de Chamada de Emergência - Projeto Alura

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zbt2u2Ln4NjmTZ-wvSD2RpXAIZ1_qBpT
"""

# Simulação 'Chatbot de Emergência'

# Importações
from IPython.display import display, HTML
import urllib.parse # Para codificar o endereço para o URL do Google Maps
import time # Para adicionar pausas

# --- URL para Informações Adicionais (SUBSTITUA PELO SEU LINK REAL para o .txt com instruções do Twilio) ---
LINK_INFORMATEC_ADICIONAIS = "COLOQUE_AQUI_O_SEU_LINK_RAW_PARA_O_ARQUIVO_TXT_COM_INSTRUCOES_TWILIO"
# Exemplo: "https://gist.github.com/SEU_USUARIO/SEU_GIST_ID/raw/instrucoes_chatbot_twilio.txt"

# Mapeamento das chaves de perguntas para texto descritivo dos alertas
TEXTOS_ALERTAS = {
    "inconsciente_ou_sem_respiracao_normal": "Pessoa inconsciente ou com respiração anormal.",
    "acidente_grave_ou_dor_forte_peito": "Acidente grave ou dor forte no peito.",
    "convulsao_ou_sinais_avc": "Convulsão ou sinais de AVC."
}

# --- Parte 1: Perguntas de Triagem e Lógica de Decisão ---

def fazer_perguntas_triagem():
    """Faz 3 perguntas de triagem para avaliar a necessidade do SAMU.
    Retorna o dicionário completo de respostas.
    """
    print("Olá! Sou seu assistente de emergência. Vou fazer algumas perguntas para entender a situação.")
    time.sleep(1)
    print("Por favor, responda com 'sim' ou 'nao'.\n")
    time.sleep(1)

    respostas_usuario = {}
    lista_perguntas = [
        ("A pessoa está inconsciente (não responde a chamados) OU não está respirando normalmente (ex: respiração muito rápida, muito lenta, ruidosa, ou ausente)?", "inconsciente_ou_sem_respiracao_normal"),
        ("Houve algum acidente grave (ex: queda de altura, batida de carro, atropelamento, ferimento profundo por arma) OU a pessoa está com uma dor súbita e muito forte no peito, que pode irradiar para o braço ou pescoço?", "acidente_grave_ou_dor_forte_peito"),
        ("A pessoa está tendo uma convulsão (ataque com tremores e perda de consciência) NESTE MOMENTO, ou apresentou subitamente dificuldade para falar, perda de força de um lado do corpo, ou desvio da boca (sugestivo de AVC)?", "convulsao_ou_sinais_avc")
    ]

    for i, (pergunta_texto, chave_resposta) in enumerate(lista_perguntas):
        if i > 0:
            time.sleep(2)
        while True:
            resposta_input = input(f"{pergunta_texto} ").strip().lower()
            if resposta_input in ["sim", "nao"]:
                respostas_usuario[chave_resposta] = (resposta_input == "sim")
                break
            else:
                print("Resposta inválida. Por favor, digite 'sim' ou 'nao'.")

    return respostas_usuario

def verificar_necessidade_samu(respostas_triagem):
    """
    Analisa as respostas e determina se o SAMU deve ser acionado.
    Retorna True se PELO MENOS UMA resposta for "sim", False caso contrário.
    """
    time.sleep(2)
    if any(respostas_triagem.values()):
        print("\nAVISO: Pelo menos uma das suas respostas indica uma situação de emergência potencial!")
        chaves_respostas_sim = [chave for chave, valor in respostas_triagem.items() if valor]
        if chaves_respostas_sim:
            textos_descritivos_sim = [TEXTOS_ALERTAS.get(chave, chave) for chave in chaves_respostas_sim]
            print(f"Condições de alerta identificadas (respondidas com 'sim'): {', '.join(textos_descritivos_sim)}")
        time.sleep(1)
        print("Acionar o SAMU (192) é fortemente recomendado.")
        return True
    else:
        print("\nCom base nas suas respostas ('não' para todas as perguntas), a situação pode não exigir o SAMU imediatamente.")
        time.sleep(1)
        print("No entanto, se você estiver em dúvida, a situação piorar, ou se houver outros sintomas preocupantes não perguntados, não hesite em ligar para o SAMU (192) ou procurar um serviço de saúde.")
        return False

# --- Parte 2: Simulação do Botão de Emergência ---

def simular_botao_samu():
    """Simula a exibição do botão para ligar para o SAMU usando HTML."""
    print("\n--- BOTÃO DE EMERGÊNCIA (SIMULAÇÃO VISUAL) ---")
    time.sleep(1)
    print("Em uma aplicação real no celular, um BOTÃO DE EMERGÊNCIA apareceria na tela.")
    time.sleep(1)
    print("Abaixo, tentamos simular visualmente esse botão usando HTML.")
    time.sleep(1)
    print("Se você estiver em um celular e clicar nele, DEVE abrir o discador com o número do SAMU.")
    time.sleep(1)

    html_botao = """
    <a href="tel:192" target="_blank" style="
        display: inline-block;
        padding: 15px 25px;
        font-size: 20px;
        font-weight: bold;
        color: white;
        background-color: #FF0000; /* Vermelho para emergência */
        border: none;
        border-radius: 8px;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    ">
        LIGAR PARA SAMU (192)
    </a>
    """
    display(HTML(html_botao))

    print("\nComo esta é uma simulação, a funcionalidade real de discagem depende do seu navegador e dispositivo.")
    time.sleep(1)
    print("Em um computador desktop, pode não fazer nada ou tentar abrir algum aplicativo de chamada.")
    print("--------------------------------------\n")
    
# --- Parte 3: Mostrar Informações Adicionais ---
def mostrar_informacoes_adicionais():
    """Mostra um link para informações adicionais sobre o projeto/configuração."""
    print("\n--- INFORMAÇÕES ADICIONAIS / INSTRUÇÕES ---")
    time.sleep(1)
    print("Visualize a interface versão Mobile pelo link: https://g.co/gemini/share/feb6f9952d93")
    print("Para mais detalhes sobre este projeto, incluindo como configurá-lo para envio real de mensagens")
    print("com Twilio (SMS/WhatsApp), ou para acessar o código-fonte e documentação completa,")
    print("por favor visite o seguinte link: https://docs.google.com/document/d/1o1Y6BgeNz1McApWFy4qkZRZA3TRCs-a-Izy5lEAwZZw/edit?usp=sharing")
    
# --- Parte 4: Obtenção de Localização e Envio de Mensagem ---

def obter_contato_emergencia():
    """Solicita o número do contato de emergência (simulado)."""
    print("\n--- CONFIGURAR CONTATO DE EMERGÊNCIA (SIMULAÇÃO) ---")
    time.sleep(1)
    print("Digite o número de telefone do seu contato de emergência.")
    print("Exemplo: 11987654321 (DDD + número)")
    while True:
        contato = input("Número do contato: ").strip()
        contato_numerico = contato.replace("+", "")
        if contato_numerico.isdigit() and len(contato_numerico) >= 9:
            return contato
        else:
            print("Número inválido. Por favor, insira um número de telefone válido (pelo menos 9 dígitos, incluindo DDD se aplicável).")

def obter_localizacao_por_endereco():
    """
    Pede ao usuário para digitar o endereço ou ponto de referência.
    """
    print("\n--- INFORMANDO LOCALIZAÇÃO (POR ENDEREÇO) ---")
    time.sleep(1)
    print("Simulando que a permissão de localização já foi dada ou que esta é a forma de obter a localização.")

    endereco_completo = ""
    while not endereco_completo:
        endereco_completo = input("Por favor, digite sua RUA, NÚMERO, BAIRRO ou um PONTO DE REFERÊNCIA claro: ").strip()
        if not endereco_completo:
            print("O endereço não pode ficar em branco. Por favor, tente novamente.")

    print(f"Endereço informado: {endereco_completo}")
    return endereco_completo


def simular_envio_mensagem(contato_emergencia, endereco_informado, alertas_identificados, nome_vitima="Alguém"):
    """Simula o envio de uma mensagem de emergência para o contato usando o endereço e os alertas."""
    print("\n--- ENVIANDO MENSAGEM DE EMERGÊNCIA (SIMULAÇÃO) ---")
    time.sleep(2)

    endereco_codificado = urllib.parse.quote_plus(endereco_informado)
    link_maps = f"https://www.google.com/maps/search/?api=1&query={endereco_codificado}"

    mensagem = f"""
    ALERTA DE EMERGÊNCIA!
    {nome_vitima} pode estar precisando de ajuda urgente!
    Localização informada:
    {endereco_informado}
    (Tentar ver no mapa: {link_maps})
    """

    if alertas_identificados:
        mensagem += "\nSintomas/Condições reportadas:\n"
        for alerta_chave in alertas_identificados:
            descricao_alerta = TEXTOS_ALERTAS.get(alerta_chave, alerta_chave.replace("_", " ").capitalize())
            mensagem += f"- {descricao_alerta}\n"

    mensagem += "\nPor favor, tente contato ou procure ajuda."

    print(f"A seguinte mensagem SERIA ENVIADA para o número: {contato_emergencia}")
    print("-----")
    print(mensagem)
    print("-----")
    time.sleep(1)
    print("Em um sistema real, esta mensagem seria enviada via SMS ou WhatsApp (usando APIs como Twilio).")
    time.sleep(1)
    print("O link do mapa tentará localizar o endereço fornecido.")
    print("-----\n")

# --- Função Principal para Executar o Chatbot ---
def iniciar_chatbot():
    """Função principal para rodar o fluxo do chatbot."""

    nome_usuario = input("Qual é o seu nome (ou o nome da pessoa que precisa de ajuda)? ").strip()
    if not nome_usuario:
        nome_usuario = "Alguém"

    time.sleep(1)
    respostas_da_triagem = fazer_perguntas_triagem()
    precisa_samu = verificar_necessidade_samu(respostas_da_triagem)
    time.sleep(3)

    if precisa_samu:
        simular_botao_samu()
        time.sleep(3)

        print("\nAVISO: Como uma emergência foi identificada, também vamos preparar uma notificação para o seu contato de emergência.")
        time.sleep(3)
        contato = obter_contato_emergencia()
        time.sleep(1)
        endereco = obter_localizacao_por_endereco()
        time.sleep(1)

        alertas_para_mensagem = [chave for chave, valor in respostas_da_triagem.items() if valor]

        if endereco:
            simular_envio_mensagem(contato, endereco, alertas_para_mensagem, nome_vitima=nome_usuario)
        else:
            print("Não foi possível enviar a mensagem de emergência pois o endereço não foi fornecido.")
        time.sleep(3)

    print("\n--- Fim da Simulação do Chatbot de Emergência ---")
    time.sleep(1) # Pequena pausa antes da pergunta final

# Mostra diretamente o link para informações adicionais
    mostrar_informacoes_adicionais()

    time.sleep(1)
    print("\nObrigado por usar o assistente de emergência simulado!")

# Inicia o chatbot automaticamente ao executar a célula

iniciar_chatbot()
